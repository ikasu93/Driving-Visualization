/* generated by template generator.ComponentWithConstant*/


package visualization.main;

import java.util.LinkedHashMap;
import java.util.Map;
import java.io.IOException;

import de.se_rwth.commons.logging.Log;

public class SDCS {
  //inputs
  private Double time;
  private Double fl;
  private Double fr;
  private Double slf;
  private Double slb;
  private Double velocity;
  
  // outputs
  private Double steering;
  private Double acceleration;
  private Boolean lightStatus;
  private Boolean indicatorStatus;
  private Boolean doorStatus;
	
  // internal variables

  // atomic blocks

  // non-atomic blocks
  private SteeringControl steeringControl;
  private IndicatorStatus indStatus;
  private ConstantVelocity constantVelocity;
  private LightTimer lightTimer;
  private DoorStatus ds;
	
  //connectors
  private Map<String, String> connectors;
  private Map<String, Object> portValues;
    
  public SDCS() throws NumberFormatException, IOException {
    this.steeringControl = new SteeringControl();
    this.indStatus = new IndicatorStatus();
    this.constantVelocity = new ConstantVelocity();
    this.lightTimer = new LightTimer();
    this.ds = new DoorStatus();
    
    this.portValues = new LinkedHashMap<String, Object>();
    
    // connectors map is opposite direction
    // than connectors, b/c reading decadency
    // is opposite than writing dependency
    this.connectors = new LinkedHashMap<String, String>(14);
    connectors.put("steering", "steeringControl.steering");
    connectors.put("acceleration", "constantVelocity.acceleration");
    connectors.put("lightStatus", "lightTimer.status");
    connectors.put("indicatorStatus", "indStatus.status");
    connectors.put("doorStatus", "ds.status");
    connectors.put("constantVelocity.time", "time");
    connectors.put("constantVelocity.velocity", "velocity");
    connectors.put("steeringControl.fl", "fl");
    connectors.put("steeringControl.fr", "fr");
    connectors.put("steeringControl.slf", "slf");
    connectors.put("steeringControl.slb", "slb");
    connectors.put("indStatus.time", "time");
    connectors.put("ds.velocity", "velocity");
    connectors.put("lightTimer.time", "time");
  }
  
  public void setInputs(Map<String, Object> inputs) {
    time = (Double)Log.errorIfNull(inputs.get("time"));
    fl = (Double)Log.errorIfNull(inputs.get("fl"));
    fr = (Double)Log.errorIfNull(inputs.get("fr"));
    slf = (Double)Log.errorIfNull(inputs.get("slf"));
    slb = (Double)Log.errorIfNull(inputs.get("slb"));
    velocity = (Double)Log.errorIfNull(inputs.get("velocity"));
  }
  
   public Map<String, Object> getOutputs() {
     Map<String, Object> outputs = new LinkedHashMap<String, Object>();
     outputs.put("steering", steering);
     outputs.put("acceleration", acceleration);
     outputs.put("lightStatus", lightStatus);
     outputs.put("indicatorStatus", indicatorStatus);
     outputs.put("doorStatus", doorStatus);
     return outputs;
  }
    
  public void execute() {
    // do calculation
    Map<String, Object> steeringControlInputs = new LinkedHashMap<String, Object>();
    Map<String, Object> steeringControlOutputs = steeringControl.getOutputs();

    Map<String, Object> indStatusInputs = new LinkedHashMap<String, Object>();
    Map<String, Object> indStatusOutputs = indStatus.getOutputs();

    Map<String, Object> constantVelocityInputs = new LinkedHashMap<String, Object>();
    Map<String, Object> constantVelocityOutputs = constantVelocity.getOutputs();

    Map<String, Object> lightTimerInputs = new LinkedHashMap<String, Object>();
    Map<String, Object> lightTimerOutputs = lightTimer.getOutputs();

    Map<String, Object> dsInputs = new LinkedHashMap<String, Object>();
    Map<String, Object> dsOutputs = ds.getOutputs();


    // 0: save input values
    portValues.put("time", time);
    portValues.put("fl", fl);
    portValues.put("fr", fr);
    portValues.put("slf", slf);
    portValues.put("slb", slb);
    portValues.put("velocity", velocity);
    
    // execute steeringControl.less1 block
    steeringControlInputs.clear();
    for(String inport : steeringControl.getInportNames()) {
      steeringControlInputs.put(inport, portValues.get(connectors.get("steeringControl." + inport)));
    }
    steeringControl.setInputs(steeringControlInputs);

    steeringControl.execute("less1");

    steeringControlOutputs.clear();
    steeringControlOutputs = steeringControl.getOutputs();
    for(String key : steeringControlOutputs.keySet()) {
      portValues.put("steeringControl."+ key, steeringControlOutputs.get(key));
    }

    // execute steeringControl.less2 block
    steeringControlInputs.clear();
    for(String inport : steeringControl.getInportNames()) {
      steeringControlInputs.put(inport, portValues.get(connectors.get("steeringControl." + inport)));
    }
    steeringControl.setInputs(steeringControlInputs);

    steeringControl.execute("less2");

    steeringControlOutputs.clear();
    steeringControlOutputs = steeringControl.getOutputs();
    for(String key : steeringControlOutputs.keySet()) {
      portValues.put("steeringControl."+ key, steeringControlOutputs.get(key));
    }

    // execute steeringControl.and block
    steeringControlInputs.clear();
    for(String inport : steeringControl.getInportNames()) {
      steeringControlInputs.put(inport, portValues.get(connectors.get("steeringControl." + inport)));
    }
    steeringControl.setInputs(steeringControlInputs);

    steeringControl.execute("and");

    steeringControlOutputs.clear();
    steeringControlOutputs = steeringControl.getOutputs();
    for(String key : steeringControlOutputs.keySet()) {
      portValues.put("steeringControl."+ key, steeringControlOutputs.get(key));
    }

    // execute steeringControl.steeringValue block
    steeringControlInputs.clear();
    for(String inport : steeringControl.getInportNames()) {
      steeringControlInputs.put(inport, portValues.get(connectors.get("steeringControl." + inport)));
    }
    steeringControl.setInputs(steeringControlInputs);

    steeringControl.execute("steeringValue");

    steeringControlOutputs.clear();
    steeringControlOutputs = steeringControl.getOutputs();
    for(String key : steeringControlOutputs.keySet()) {
      portValues.put("steeringControl."+ key, steeringControlOutputs.get(key));
    }

    // execute steeringControl.steeringNull block
    steeringControlInputs.clear();
    for(String inport : steeringControl.getInportNames()) {
      steeringControlInputs.put(inport, portValues.get(connectors.get("steeringControl." + inport)));
    }
    steeringControl.setInputs(steeringControlInputs);

    steeringControl.execute("steeringNull");

    steeringControlOutputs.clear();
    steeringControlOutputs = steeringControl.getOutputs();
    for(String key : steeringControlOutputs.keySet()) {
      portValues.put("steeringControl."+ key, steeringControlOutputs.get(key));
    }

    // execute steeringControl.switchB block
    steeringControlInputs.clear();
    for(String inport : steeringControl.getInportNames()) {
      steeringControlInputs.put(inport, portValues.get(connectors.get("steeringControl." + inport)));
    }
    steeringControl.setInputs(steeringControlInputs);

    steeringControl.execute("switchB");

    steeringControlOutputs.clear();
    steeringControlOutputs = steeringControl.getOutputs();
    for(String key : steeringControlOutputs.keySet()) {
      portValues.put("steeringControl."+ key, steeringControlOutputs.get(key));
    }

    // execute constantVelocity.constant block
    constantVelocityInputs.clear();
    for(String inport : constantVelocity.getInportNames()) {
      constantVelocityInputs.put(inport, portValues.get(connectors.get("constantVelocity." + inport)));
    }
    constantVelocity.setInputs(constantVelocityInputs);

    constantVelocity.execute("constant");

    constantVelocityOutputs.clear();
    constantVelocityOutputs = constantVelocity.getOutputs();
    for(String key : constantVelocityOutputs.keySet()) {
      portValues.put("constantVelocity."+ key, constantVelocityOutputs.get(key));
    }

    // execute constantVelocity.relationalOperator block
    constantVelocityInputs.clear();
    for(String inport : constantVelocity.getInportNames()) {
      constantVelocityInputs.put(inport, portValues.get(connectors.get("constantVelocity." + inport)));
    }
    constantVelocity.setInputs(constantVelocityInputs);

    constantVelocity.execute("relationalOperator");

    constantVelocityOutputs.clear();
    constantVelocityOutputs = constantVelocity.getOutputs();
    for(String key : constantVelocityOutputs.keySet()) {
      portValues.put("constantVelocity."+ key, constantVelocityOutputs.get(key));
    }

    // execute constantVelocity.constant1 block
    constantVelocityInputs.clear();
    for(String inport : constantVelocity.getInportNames()) {
      constantVelocityInputs.put(inport, portValues.get(connectors.get("constantVelocity." + inport)));
    }
    constantVelocity.setInputs(constantVelocityInputs);

    constantVelocity.execute("constant1");

    constantVelocityOutputs.clear();
    constantVelocityOutputs = constantVelocity.getOutputs();
    for(String key : constantVelocityOutputs.keySet()) {
      portValues.put("constantVelocity."+ key, constantVelocityOutputs.get(key));
    }

    // execute constantVelocity.constant2 block
    constantVelocityInputs.clear();
    for(String inport : constantVelocity.getInportNames()) {
      constantVelocityInputs.put(inport, portValues.get(connectors.get("constantVelocity." + inport)));
    }
    constantVelocity.setInputs(constantVelocityInputs);

    constantVelocity.execute("constant2");

    constantVelocityOutputs.clear();
    constantVelocityOutputs = constantVelocity.getOutputs();
    for(String key : constantVelocityOutputs.keySet()) {
      portValues.put("constantVelocity."+ key, constantVelocityOutputs.get(key));
    }

    // execute constantVelocity.switchBlock block
    constantVelocityInputs.clear();
    for(String inport : constantVelocity.getInportNames()) {
      constantVelocityInputs.put(inport, portValues.get(connectors.get("constantVelocity." + inport)));
    }
    constantVelocity.setInputs(constantVelocityInputs);

    constantVelocity.execute("switchBlock");

    constantVelocityOutputs.clear();
    constantVelocityOutputs = constantVelocity.getOutputs();
    for(String key : constantVelocityOutputs.keySet()) {
      portValues.put("constantVelocity."+ key, constantVelocityOutputs.get(key));
    }

    // execute indStatus.divisor block
    indStatusInputs.clear();
    for(String inport : indStatus.getInportNames()) {
      indStatusInputs.put(inport, portValues.get(connectors.get("indStatus." + inport)));
    }
    indStatus.setInputs(indStatusInputs);

    indStatus.execute("divisor");

    indStatusOutputs.clear();
    indStatusOutputs = indStatus.getOutputs();
    for(String key : indStatusOutputs.keySet()) {
      portValues.put("indStatus."+ key, indStatusOutputs.get(key));
    }

    // execute indStatus.mod block
    indStatusInputs.clear();
    for(String inport : indStatus.getInportNames()) {
      indStatusInputs.put(inport, portValues.get(connectors.get("indStatus." + inport)));
    }
    indStatus.setInputs(indStatusInputs);

    indStatus.execute("mod");

    indStatusOutputs.clear();
    indStatusOutputs = indStatus.getOutputs();
    for(String key : indStatusOutputs.keySet()) {
      portValues.put("indStatus."+ key, indStatusOutputs.get(key));
    }

    // execute indStatus.condition block
    indStatusInputs.clear();
    for(String inport : indStatus.getInportNames()) {
      indStatusInputs.put(inport, portValues.get(connectors.get("indStatus." + inport)));
    }
    indStatus.setInputs(indStatusInputs);

    indStatus.execute("condition");

    indStatusOutputs.clear();
    indStatusOutputs = indStatus.getOutputs();
    for(String key : indStatusOutputs.keySet()) {
      portValues.put("indStatus."+ key, indStatusOutputs.get(key));
    }

    // execute indStatus.less block
    indStatusInputs.clear();
    for(String inport : indStatus.getInportNames()) {
      indStatusInputs.put(inport, portValues.get(connectors.get("indStatus." + inport)));
    }
    indStatus.setInputs(indStatusInputs);

    indStatus.execute("less");

    indStatusOutputs.clear();
    indStatusOutputs = indStatus.getOutputs();
    for(String key : indStatusOutputs.keySet()) {
      portValues.put("indStatus."+ key, indStatusOutputs.get(key));
    }

    // execute lightTimer.timeout block
    lightTimerInputs.clear();
    for(String inport : lightTimer.getInportNames()) {
      lightTimerInputs.put(inport, portValues.get(connectors.get("lightTimer." + inport)));
    }
    lightTimer.setInputs(lightTimerInputs);

    lightTimer.execute("timeout");

    lightTimerOutputs.clear();
    lightTimerOutputs = lightTimer.getOutputs();
    for(String key : lightTimerOutputs.keySet()) {
      portValues.put("lightTimer."+ key, lightTimerOutputs.get(key));
    }

    // execute lightTimer.greater block
    lightTimerInputs.clear();
    for(String inport : lightTimer.getInportNames()) {
      lightTimerInputs.put(inport, portValues.get(connectors.get("lightTimer." + inport)));
    }
    lightTimer.setInputs(lightTimerInputs);

    lightTimer.execute("greater");

    lightTimerOutputs.clear();
    lightTimerOutputs = lightTimer.getOutputs();
    for(String key : lightTimerOutputs.keySet()) {
      portValues.put("lightTimer."+ key, lightTimerOutputs.get(key));
    }

    // execute ds.idle block
    dsInputs.clear();
    for(String inport : ds.getInportNames()) {
      dsInputs.put(inport, portValues.get(connectors.get("ds." + inport)));
    }
    ds.setInputs(dsInputs);

    ds.execute("idle");

    dsOutputs.clear();
    dsOutputs = ds.getOutputs();
    for(String key : dsOutputs.keySet()) {
      portValues.put("ds."+ key, dsOutputs.get(key));
    }

    // execute ds.equals block
    dsInputs.clear();
    for(String inport : ds.getInportNames()) {
      dsInputs.put(inport, portValues.get(connectors.get("ds." + inport)));
    }
    ds.setInputs(dsInputs);

    ds.execute("equals");

    dsOutputs.clear();
    dsOutputs = ds.getOutputs();
    for(String key : dsOutputs.keySet()) {
      portValues.put("ds."+ key, dsOutputs.get(key));
    }

    
    // 2: save output values
    steering = (Double)portValues.get(connectors.get("steering"));
    acceleration = (Double)portValues.get(connectors.get("acceleration"));
    lightStatus = (Boolean)portValues.get(connectors.get("lightStatus"));
    indicatorStatus = (Boolean)portValues.get(connectors.get("indicatorStatus"));
    doorStatus = (Boolean)portValues.get(connectors.get("doorStatus"));
  }
  
  public static String[] getInportNames() {
  	return new String[] {
      "time", 
      "fl", 
      "fr", 
      "slf", 
      "slb", 
      "velocity"
    };
  }
}  