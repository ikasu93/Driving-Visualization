/* generated by template generator.ComponentWithConstant*/


package montiarc;

import java.util.LinkedHashMap;
import java.util.Map;
import java.io.IOException;
import de.ma2cfg.simulator.atomic_blocks.Constant;
import de.ma2cfg.simulator.atomic_blocks.Constant;
import de.ma2cfg.simulator.atomic_blocks.Constant;
import de.ma2cfg.simulator.atomic_blocks.Constant;
import de.ma2cfg.simulator.atomic_blocks.Less;
import de.ma2cfg.simulator.atomic_blocks.SwitchB;

import de.se_rwth.commons.logging.Log;

public class Constant_velocity {
  //inputs
  private Double velocity;
  private Double time;
  
  // outputs
  private Double acceleration;
  private Double steering;
	
  // internal variables

  // atomic blocks
  private Constant<Double> constant;
  private Constant<Double> constant1;
  private Constant<Double> constant2;
  private Constant<Double> constant3;
  private Less<Double> relationalOperator;
  private SwitchB<Double> switchBlock;

  // non-atomic blocks
	
  //connectors
  private Map<String, String> connectors;
  private Map<String, Object> portValues;
    
  public Constant_velocity() throws NumberFormatException, IOException {
    this.constant = new Constant<Double>(1.0);
    this.constant1 = new Constant<Double>(0.0);
    this.constant2 = new Constant<Double>(2.0);
    this.constant3 = new Constant<Double>(0.0);
    this.relationalOperator = new Less<Double>();
    this.switchBlock = new SwitchB<Double>();
    
    this.portValues = new LinkedHashMap<String, Object>();
    
    // connectors map is opposite direction
    // than connectors, b/c reading decadency
    // is opposite than writing dependency
    this.connectors = new LinkedHashMap<String, String>(7);
    connectors.put("acceleration", "switchBlock.out1");
    connectors.put("steering", "constant3.out1");
    connectors.put("switchBlock.cond", "relationalOperator.out1");
    connectors.put("switchBlock.in1", "constant2.out1");
    connectors.put("switchBlock.in3", "constant1.out1");
    connectors.put("relationalOperator.in1", "time");
    connectors.put("relationalOperator.in2", "constant.out1");
  }
  
  public void setInputs(Map<String, Object> inputs) {
    velocity = (Double)Log.errorIfNull(inputs.get("velocity"));
    time = (Double)Log.errorIfNull(inputs.get("time"));
  }
  
   public Map<String, Object> getOutputs() {
     Map<String, Object> outputs = new LinkedHashMap<String, Object>();
     outputs.put("acceleration", acceleration);
     outputs.put("steering", steering);
     return outputs;
  }
    
  public void execute() {
    // do calculation

    // 0: save input values
    portValues.put("velocity", velocity);
    portValues.put("time", time);
    
    // execute constant block
    Map<String, Object> constantInputs = new LinkedHashMap<String, Object>();
    for(String inport : constant.getInportNames()) {
      constantInputs.put(inport, portValues.get(connectors.get("constant." + inport)));
    }
    constant.setInputs(constantInputs);

    constant.execute();

    Map<String, Object> constantOutputs = constant.getOutputs();
    for(String key : constantOutputs.keySet()) {
      portValues.put("constant."+ key, constantOutputs.get(key));
    }

    // execute constant1 block
    Map<String, Object> constant1Inputs = new LinkedHashMap<String, Object>();
    for(String inport : constant1.getInportNames()) {
      constant1Inputs.put(inport, portValues.get(connectors.get("constant1." + inport)));
    }
    constant1.setInputs(constant1Inputs);

    constant1.execute();

    Map<String, Object> constant1Outputs = constant1.getOutputs();
    for(String key : constant1Outputs.keySet()) {
      portValues.put("constant1."+ key, constant1Outputs.get(key));
    }

    // execute constant2 block
    Map<String, Object> constant2Inputs = new LinkedHashMap<String, Object>();
    for(String inport : constant2.getInportNames()) {
      constant2Inputs.put(inport, portValues.get(connectors.get("constant2." + inport)));
    }
    constant2.setInputs(constant2Inputs);

    constant2.execute();

    Map<String, Object> constant2Outputs = constant2.getOutputs();
    for(String key : constant2Outputs.keySet()) {
      portValues.put("constant2."+ key, constant2Outputs.get(key));
    }

    // execute constant3 block
    Map<String, Object> constant3Inputs = new LinkedHashMap<String, Object>();
    for(String inport : constant3.getInportNames()) {
      constant3Inputs.put(inport, portValues.get(connectors.get("constant3." + inport)));
    }
    constant3.setInputs(constant3Inputs);

    constant3.execute();

    Map<String, Object> constant3Outputs = constant3.getOutputs();
    for(String key : constant3Outputs.keySet()) {
      portValues.put("constant3."+ key, constant3Outputs.get(key));
    }

    // execute relationalOperator block
    Map<String, Object> relationalOperatorInputs = new LinkedHashMap<String, Object>();
    for(String inport : relationalOperator.getInportNames()) {
      relationalOperatorInputs.put(inport, portValues.get(connectors.get("relationalOperator." + inport)));
    }
    relationalOperator.setInputs(relationalOperatorInputs);

    relationalOperator.execute();

    Map<String, Object> relationalOperatorOutputs = relationalOperator.getOutputs();
    for(String key : relationalOperatorOutputs.keySet()) {
      portValues.put("relationalOperator."+ key, relationalOperatorOutputs.get(key));
    }

    // execute switchBlock block
    Map<String, Object> switchBlockInputs = new LinkedHashMap<String, Object>();
    for(String inport : switchBlock.getInportNames()) {
      switchBlockInputs.put(inport, portValues.get(connectors.get("switchBlock." + inport)));
    }
    switchBlock.setInputs(switchBlockInputs);

    switchBlock.execute();

    Map<String, Object> switchBlockOutputs = switchBlock.getOutputs();
    for(String key : switchBlockOutputs.keySet()) {
      portValues.put("switchBlock."+ key, switchBlockOutputs.get(key));
    }

    
    // 2: save output values
    acceleration = (Double)portValues.get(connectors.get("acceleration"));
    steering = (Double)portValues.get(connectors.get("steering"));
  }
  
  public static String[] getInportNames() {
  	return new String[] {
      "velocity", 
      "time"
    };
  }
}  